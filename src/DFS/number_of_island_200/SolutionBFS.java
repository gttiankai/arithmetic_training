package DFS.number_of_island_200;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;

public class SolutionBFS {
    /**
     * Runtime: 2 ms, faster than 46.91% of Java online submissions for Number of Islands.
     * Memory Usage: 41.5 MB, less than 57.80% of Java online submissions for Number of Islands.
     *
     * 终于成功了, 这个 BFS 算法还是有一些坑的
     *
     * */
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }

        int count = 0;
        int m = grid.length;
        int n = grid[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1') {
                    count++;
                    BFS(grid, i, j);
                }
            }
        }
        return count;

    }

    // 将 grid[i][j]附近的所有陆地清除
    // 递归的清除
    private void BFS(char[][] grid, int i, int j) {
        int m = grid.length;
        int n = grid[0].length;
        Queue<int[]> queue = new LinkedList<>();
        grid[i][j] = '0';
        queue.add(new int[]{i, j});
        while (!queue.isEmpty()) {
            int[] item = queue.poll();
            int row = item[0];
            int col = item[1];

            grid[row][col] = '0';
            if (row > 0 && grid[row-1][col] == '1') {
                grid[row-1][col] = '0';
                queue.add(new int[]{row-1, col});
            }
            if (row < m-1 && grid[row+1][col] == '1') {
                grid[row+1][col] = '0';
                queue.add(new int[]{row+1, col});
            }
            if (col > 0 && grid[row][col-1] == '1') {
                grid[row][col-1] = '0';
                queue.add(new int[]{row, col-1});
            }
            if (col < n-1 && grid[row][col+1] == '1') {
                grid[row][col+1] = '0';
                queue.add(new int[]{row, col+1});
            }
        }
    }
    public static void main(String[] arguments) {
        //char[][] grid = {{'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},{'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},{'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},{'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}};
        char[][] grid = {{'1', '1', '1'},{'0','1','0'},{'1','1','1'}};
        SolutionBFS solution = new SolutionBFS();
        System.out.println(solution.numIslands(grid));
    }
}
