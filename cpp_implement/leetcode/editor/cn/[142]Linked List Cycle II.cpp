// Given the head of a linked list, return the node where the cycle begins. If
// there is no cycle, return null.
//
//  There is a cycle in a linked list if there is some node in the list that can
// be reached again by continuously following the next pointer. Internally, pos
// is used to denote the index of the node that tail's next pointer is connected
// to (0 -indexed). It is -1 if there is no cycle. Note that pos is not passed
// as a parameter.
//
//  Do not modify the linked list.
//
//
//  Example 1:
//
//
// Input: head = [3,2,0,-4], pos = 1
// Output: tail connects to node index 1
// Explanation: There is a cycle in the linked list, where tail connects to the
// second node.
//
//
//  Example 2:
//
//
// Input: head = [1,2], pos = 0
// Output: tail connects to node index 0
// Explanation: There is a cycle in the linked list, where tail connects to the
// first node.
//
//
//  Example 3:
//
//
// Input: head = [1], pos = -1
// Output: no cycle
// Explanation: There is no cycle in the linked list.
//
//
//
//  Constraints:
//
//
//  The number of the nodes in the list is in the range [0, 10‚Å¥].
//  -10‚Åµ <= Node.val <= 10‚Åµ
//  pos is -1 or a valid index in the linked-list.
//
//
//
//  Follow up: Can you solve it using O(1) (i.e. constant) memory?
//
//  Related Topics ÂìàÂ∏åË°® ÈìæË°® ÂèåÊåáÈíà üëç 2813 üëé 0
#include "list_node.h"
// leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
   public:
    /**
     * ‰∏ãÈù¢ÁöÑÈ¢òÁõÆÊúâ‰∏ÄÁßçÂæàÁõ¥Êé•ÁöÑËß£Ê≥ï:
     * Ëß£Ê≥ï‰∏Ä:
     *     ‰ΩøÁî®‰∏Ä‰∏™ std::unordered_set ËÆ∞ÂΩïÂ∑≤ÁªèËÆøÈóÆËøáÁöÑ ListNode ,ÊØèÊ¨°ËÆøÈóÆÊñ∞ÁöÑ
     *     ListNode Êó∂,È¶ñÂÖàÂú® set ‰∏≠Êü•Êâæ,ËØ• ListNode ÊòØÂê¶Â∑≤ÁªèÂ≠òÂú®,Â¶ÇÊûúÊ≤°ÊúâÂ≠òÂú®,Â∞Ü
     *     ËØ•ËäÇÁÇπ insert Âà∞ set ‰∏≠,Â¶ÇÊûúÁ¨¨‰∏ÄÊ¨°Âá∫Áé∞ set ‰∏≠Â∑≤ÁªèÂ≠òÂú®ÁöÑËäÇÁÇπ,ÈÇ£‰πàËøô‰∏™ËäÇ
     *     ÁÇπÂ∞±ÊòØÊàë‰ª¨Ë¶ÅÊâæÁöÑÂæ™ÁéØÂºÄÂßãÁöÑËäÇÁÇπ
     * Áî±‰∫éÈ¢òÁõÆ‰∏≠ÊúâËøõ‰∏ÄÊ≠•ÁöÑË¶ÅÊ±Ç: Á©∫Èó¥Â§çÊùÇÂ∫¶: O(1) ,Ëß£Ê≥ï 1 ÁöÑÁ©∫Èó¥Â§çÊùÇÂ∫¶‰∏∫: O(n)
     * Ëß£Ê≥ï‰∫å:
     *     ÂèØ‰ª•Áúã‰∏ãÈ¢òÁõÆ‰∏≠ÁöÑËß£È¢òÊÄùË∑Ø, Ëøô‰∏™ÊÄùË∑ØÂÆåÂÖ®ÊòØÊï∞Â≠¶Êé®ÁêÜ
     **/
    ListNode* detectCycle(ListNode* head) {
    }
};
// leetcode submit region end(Prohibit modification and deletion)
